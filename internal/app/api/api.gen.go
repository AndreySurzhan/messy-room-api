// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/gin-gonic/gin"
)

// Resource defines model for Resource.
type Resource struct {
	ID   *uint64 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

// ResourceCreate defines model for ResourceCreate.
type ResourceCreate struct {
	Name string `json:"name"`
}

// GetResourceIDParams defines parameters for GetResourceID.
type GetResourceIDParams struct {
	Limit  *uint64 `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *uint64 `form:"offset,omitempty" json:"offset,omitempty"`
}

// PostResourceJSONRequestBody defines body for PostResource for application/json ContentType.
type PostResourceJSONRequestBody = ResourceCreate

// PutResourceIDJSONRequestBody defines body for PutResourceID for application/json ContentType.
type PutResourceIDJSONRequestBody = ResourceCreate

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /resource)
	PostResource(c *gin.Context)

	// (DELETE /resource/{id})
	DeleteResourceID(c *gin.Context, id uint64)

	// (GET /resource/{id})
	GetResourceID(c *gin.Context, id uint64, params GetResourceIDParams)

	// (PUT /resource/{id})
	PutResourceID(c *gin.Context, id uint64)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostResource operation middleware
func (siw *ServerInterfaceWrapper) PostResource(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostResource(c)
}

// DeleteResourceID operation middleware
func (siw *ServerInterfaceWrapper) DeleteResourceID(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint64

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteResourceID(c, id)
}

// GetResourceID operation middleware
func (siw *ServerInterfaceWrapper) GetResourceID(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint64

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetResourceIDParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetResourceID(c, id, params)
}

// PutResourceID operation middleware
func (siw *ServerInterfaceWrapper) PutResourceID(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint64

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PutResourceID(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {

	errorHandler := options.ErrorHandler

	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/resource", wrapper.PostResource)

	router.DELETE(options.BaseURL+"/resource/:id", wrapper.DeleteResourceID)

	router.GET(options.BaseURL+"/resource/:id", wrapper.GetResourceID)

	router.PUT(options.BaseURL+"/resource/:id", wrapper.PutResourceID)

	return router
}
