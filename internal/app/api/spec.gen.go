// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RUTW/UMBD9K9HAMWpSWHHIrQWBVkhQVeKEOJh4sp1q43HHE6TVKv8d2d7s9iOoC5Ry",
	"SSzPx/O8eTNbaLn37NBpgGYLob3C3qTjJQYepMV49sIeRQmThWz8diy9UWhgIKdvFlCCbjxCA+QUVygw",
	"luBMn+J3lqBCbgXjuPfl79fYanSd4N4KGp0B/YNUX7z9u1TxilzHyZl0HW1T8uLsYgkl/EAJxA4aOD2p",
	"T+oIzx6d8QQNvE5XJXijVwm5ktukctD4j08zSuyWFhq44KB76ksQvBkw6DnbTfRt2Sm6FGa8X1ObAqvr",
	"EJ8wtS+eXgp20MCL6tDfatfc6h7VqcyIQ4IWGpUB00Xw7EJm7FV9+uToGddiaIW8Zg7zi2xkcVHXMdNd",
	"+7mxxWVmJIaP5YHRakt2zBFrzF2/S+y7dD+hL23qi5geFSVA83ULFCFir2BSbpT6fW7KW3U+PgPjtwdU",
	"ztT1+WMuefHQ9Im1eM+Ds5mvFc5o5gPqs9dV7vLeDCibQ+I19aTwNLm46wL+drJfEH60dkmxD8eLeP8C",
	"I2I2c6I+K9YUtOCumLQaspsf5uZ/0P+j0X+3Z3Z7+Kg9Uz/Lnpnm7bEVc8xMjuP4MwAA//+bi5USRgcA",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
